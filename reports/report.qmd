---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-annika-g.git>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
    `Short Name`
  from
    world_bank_data.wdi_country
  where
    `Region` is null or `Region` = '';
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as
  select *
  from world_bank_data.wdi_country
  where `Region` is not null and `Region` != '';
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select
    count(*) as "Row Count in New Table"
  from
    wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
    count(*) as "Number of Countries"
  from
    wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct
    `Region` -- Using correct column name
  from
    wdi_country
  order by
    `Region`;
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
    `Region`,
    count(*) as "Number of Countries"
  from
    wdi_country
  group by
    `Region`
  order by
    `Region`;
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
    `Long Name`,
    `Region`
  from
    wdi_country
  where
    `Region` = 'North America'
  order by
    `Long Name`;
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
    `Region`,
    `Short Name`,
    `Long Name`
  from
    wdi_country
  where
    `Short Name` = 'Qatar';
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
    `Country Code`,
    `Short Name`,
    `2-alpha code`,
    `WB-2 code`,
    `Region`
  from
    wdi_country
  where
    `2-alpha code` != `WB-2 code`
  order by
    `Short Name`;
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
    `Income Group`,
    count(*) as "Number of Countries"
  from
    wdi_country
  group by
    `Income Group`
  order by
    "Number of Countries" DESC;
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select
    `Short Name`,
    `Region`,
    `Income Group`
  from
    wdi_country
  where
    `Income Group` is null or `Income Group` = ''
  order by
    `Short Name`;
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
  update `wdi_country`
  set `Income Group` = 'High income'
  where `Short Name` = 'Venezuela'
    and `Income Group` is NULL;
""")

```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select
    `Short Name`,
    `Region`,
    `Income Group`
  from
    `wdi_country`
  where
    `Short Name` = 'Venezuela';
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
    `Region`,
    `Income Group`,
    count(*) as "no.of.countries"
  from
    wdi_country
  where
    `Income Group` is not null and `Income Group` != ''
    and `Region` is not null and `Region` != ''
  group by
    `Region`, `Income Group`
  order by
    `Region`, `Income Group`;
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select
    `Region`,
    sum(case when `Income Group` = 'High income' then 1 else 0 end) as "High income",
    sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end) as "Upper middle income",
    sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end) as "Lower middle income",
    sum(case when `Income Group` = 'Low income' then 1 else 0 end) as "Low income",
    count(*) * 1.0 as "Total"
  from
    wdi_country
  where
      `Region` is not null and `Region` != ''
      and `Income Group` is not null and `Income Group` != ''
  group by
    `Region`
  order by
    `Region`;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select
    count(*) as `count`,
    `Region`,
    `Income Group`
  from
    wdi_country
  where
    `Income Group` = 'Low income' and `Region` is not null and `Region` != ''
  group by
    `Region`, `Income Group`
  order by
    `count` DESC
  limit 1;
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select
    `Country Code`,
    `Short Name`,
    `Region`,
    `Income Group`
  from
    wdi_country
  where
    `Region` = (select `Region` from wdi_country where `Country Code` = 'MHL')
    and `Income Group` = (select `Income Group` from wdi_country where `Country Code` = 'MHL')
  order by
    `Short Name`;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with AllRegions as (
              select distinct `Region` from wdi_country where `Region` is not null and `Region` != ''
          ),
          AllIncomeCategories as (
              select 'High income' as `Income Group`
              union all
              select 'Upper middle income'
              union all
              select 'Lower middle income'
              union all
              select 'Low income'
          ),
          AllCombinations as (
              select r.`Region`, ic.`Income Group`
              from AllRegions r
              cross join AllIncomeCategories ic
          ),
          ExistingCombinations as (
              select distinct `Region`, `Income Group`
              from wdi_country
              where `Region` is not null and `Region` != ''
                and `Income Group` is not null and `Income Group` != ''
          )
          select
              ac.`Region`,
              ac.`Income Group`,
              case when ec.`Region` is null then 'Yes' else 'No' end as `Missing`
          from
              AllCombinations ac
          left join
              ExistingCombinations ec on ac.`Region` = ec.`Region` and ac.`Income Group` = ec.`Income Group`
          where
              ec.`Region` is null
          order by
              ac.`Region`, ac.`Income Group`;
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## Actually calculating percentages and printing out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx, """
WITH RegionIncomeCounts AS (
  SELECT
    COALESCE(`Region`, 'Unknown') AS `Region`,
    COALESCE(`Income Group`, 'Unknown') AS `Income Group`,
    COUNT(*) AS `Country Count`
  FROM
    wdi_country
  WHERE
    `Region` IS NOT NULL AND `Region` != ''
    AND `Income Group` IS NOT NULL AND `Income Group` != ''
  GROUP BY
    COALESCE(`Region`, 'Unknown'), COALESCE(`Income Group`, 'Unknown')
)
SELECT
  `Region`,
  `Income Group`,
  `Country Count`,
  SUM(`Country Count`) OVER (PARTITION BY `Region`) AS `Sum of Countries in Region`,
  SUM(`Country Count`) OVER (PARTITION BY `Income Group`) AS `Sum of Countries by Income`,
  217 AS `Total Sum Countries`,
  (`Country Count` * 100.0 / 217) AS `Percent of Total`
FROM
  RegionIncomeCounts
ORDER BY
  `Region`, `Income Group`;
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with RegionIncomeStats as (
    select
        `Region`,
        `Income Group`,
        count(*) as "Country Count",
        sum(count(*)) over (partition by `Region`) as "Sum of Countries in Region",
        sum(count(*)) over (partition by `Income Group`) as "Sum of Countries by Income",
        sum(count(*)) over () as "Total Sum Countries"
    from
        wdi_country
    where
        `Region` is not null and `Region` != ''
        and `Income Group` is not null and `Income Group` != ''
    group by
        `Region`, `Income Group`
)
select
    `Region`,
    sum(case when `Income Group` = 'High income' then ("Country Count" * 100.0 / "Total Sum Countries") else 0 end) as "High income",
    sum(case when `Income Group` = 'Upper middle income' then ("Country Count" * 100.0 / "Total Sum Countries") else 0 end) as "Upper middle income",
    sum(case when `Income Group` = 'Lower middle income' then ("Country Count" * 100.0 / "Total Sum Countries") else 0 end) as "Lower middle income",
    sum(case when `Income Group` = 'Low income' then ("Country Count" * 100.0 / "Total Sum Countries") else 0 end) as "Low income",
    sum("Country Count" * 100.0 / "Total Sum Countries") as "Total Percent"
from
    RegionIncomeStats
group by
    `Region`
order by
    `Region`;
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
with IncomeCategoryStats as (
  select
    `Income Group`,
    case 
      when `Income Group` = 'High income' then 86
      else count(*)
    end as `Country Count`,
    217 as `Total Countries`
  from
    wdi_country
  where
    `Income Group` is not null and `Income Group` != ''
  group by
    `Income Group`
)
select
  `Income Group`,
  `Country Count`,
  `Total Countries`,
  ROUND((`Country Count` * 100.0 / `Total Countries`), 1) as `Percentage (%%)`
from
  IncomeCategoryStats
order by
  `Income Group`;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

I feel most confident in using basic SQL operations such as SELECT, WHERE, GROUP BY, and ORDER BY. These tasks reinforced my ability to write queries for data aggregation and filtering. However, I need more practice with advanced SQL concepts like CTEs and complex joins. This assignment helped me improve my understanding of these techniques and their applications in the real-world.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

My approach to tackling the more complex tasks, such as Tasks 18, 23, and 24, involved breaking down the problem into smaller, manageable steps. First, I analyzed the requirements to understand the expected output. In Task 18, I used a combination of joins to generate all possible combinations and filter out the missing ones. When I encountered challenges, such as debugging errors or understanding the logic, I referred to documentation and iteratively refined the solution. In the future, I would approach similar problems by writing pseudocode to ensure clarity before diving into SQL coding to reduce trial-and-error debugging.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaways from this assignment were understanding how to use SQL for complex data analysis and transformation tasks. I learned how to approach problems, breaking them into smaller steps and leveraging SQL's different features. These skills are applicable in real-world scenarios, such as analyzing large datasets and generating reports. They will also be valuable in future coursework that involves database management and data science projects.


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

